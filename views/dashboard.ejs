<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Madness - Premium AI Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles/styles.css">
</head>
<body class="text-white min-h-screen">
    <!-- Floating Particles Background -->
    <div class="floating-particles" id="particles"></div>

    <!-- Mobile Menu Toggle -->
    <button id="mobileMenuToggle" class="md:hidden fixed top-4 left-4 z-50 glass rounded-xl p-3 neon-glow">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
    </button>

    <div class="flex h-screen">
        <!-- Sidebar -->
        <div id="sidebar" class="sidebar w-80 glass border-r border-red-500/30 p-6 flex flex-col fixed md:relative h-full z-40">
            <!-- Logo -->
            <div class="mb-8">
                <h1 class="font-orbitron text-3xl font-black neon-text tracking-wider">AI MADNESS</h1>
                <!-- Enhanced logo underline with gradient and glow -->
                <div class="h-1 bg-gradient-to-r from-red-500 via-red-400 to-red-600 mt-3 neon-glow rounded-full"></div>
            </div>

            <!-- New Chat Button -->
            <button id="newChatBtn" class="w-full premium-btn text-white py-4 px-6 rounded-xl font-semibold mb-6 font-orbitron tracking-wide">
                ‚ö° NEW CHAT
            </button>

            <!-- Chat History -->
            <div class="flex-1 overflow-y-auto">
                <h3 class="text-sm font-bold text-gray-300 mb-4 font-orbitron tracking-widest">CHAT HISTORY</h3>
                <div id="chatHistory" class="space-y-3">
                    <!-- Enhanced chat history items with better styling -->
                    <div class="glass rounded-xl p-4 hover:bg-white/10 cursor-pointer transition-all duration-300 hover:transform hover:scale-105">
                        <div class="text-sm font-semibold text-white">Today</div>
                        <div class="text-xs text-gray-400 mt-1">AI Model Comparison</div>
                    </div>
                    <div class="glass rounded-xl p-4 hover:bg-white/10 cursor-pointer transition-all duration-300 hover:transform hover:scale-105">
                        <div class="text-sm font-semibold text-white">Yesterday</div>
                        <div class="text-xs text-gray-400 mt-1">Code Generation Task</div>
                    </div>
                    <div class="glass rounded-xl p-4 hover:bg-white/10 cursor-pointer transition-all duration-300 hover:transform hover:scale-105">
                        <div class="text-sm font-semibold text-white">Last Week</div>
                        <div class="text-xs text-gray-400 mt-1">Creative Writing</div>
                    </div>
                </div>
            </div>

            <!-- Plan Info -->
            <div class="mt-6 glass rounded-xl p-5 neon-glow">
                <div class="text-sm font-bold mb-3 font-orbitron">FREE PLAN</div>
                <!-- Enhanced progress bar with gradient and glow -->
                <div class="w-full bg-black/50 rounded-full h-3 mb-3 border border-white/10">
                    <div class="bg-gradient-to-r from-red-500 to-red-600 h-3 rounded-full neon-glow" style="width: 65%"></div>
                </div>
                <div class="text-xs text-gray-300 mb-4">65/100 queries used</div>
                <button class="w-full premium-btn text-white py-3 px-4 rounded-xl text-sm font-bold font-orbitron tracking-wide">
                    UPGRADE TO PRO
                </button>
            </div>

            <!-- Settings -->
            <button class="mt-6 flex items-center space-x-3 text-gray-400 hover:text-white transition-all duration-300 hover:transform hover:scale-105">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                <span class="text-sm font-semibold">Settings</span>
            </button>
        </div>

        <!-- Main Content -->
        <div class="flex-1 flex flex-col md:ml-0 ml-0">
            <!-- Top Bar -->
            <div class="glass border-b border-red-500/30 p-6 flex justify-between items-center">
                <div class="font-orbitron text-xl font-bold tracking-wider">DASHBOARD</div>
                <div class="flex items-center space-x-4">
                    <button class="glass rounded-full p-3 hover:bg-white/10 transition-all duration-300 hover:transform hover:scale-110 neon-glow">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- AI Panels Grid -->
            <div class="flex-1 p-6 overflow-y-auto">
                <div id="aiPanelsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
                    <!-- ChatGPT Panel -->
                    <div class="ai-panel glass rounded-2xl p-6 neon-glow" data-model="chatgpt">
                        <div class="flex justify-between items-center mb-6">
                            <div class="flex items-center space-x-4">
                                <!-- Added ChatGPT brand logo -->
                                <div class="w-10 h-10 bg-gradient-to-br from-green-400 to-green-600 rounded-xl flex items-center justify-center shadow-lg">
                                    <svg class="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142-.0852 4.783-2.7582a.7712.7712 0 0 0 .7806 0l5.8428 3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z"/>
                                    </svg>
                                </div>
                                <h3 class="font-bold text-lg">ChatGPT</h3>
                            </div>
                            <div class="toggle-switch active" data-model="chatgpt">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                        <div class="response-area h-48 overflow-y-auto mb-6 p-4 rounded-xl">
                            <div class="text-sm text-gray-200">Ready to assist you with any questions or tasks!</div>
                        </div>
                        <div class="flex justify-between items-center">
                            <div class="flex space-x-3">
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëç</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëé</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üì§</button>
                            </div>
                            <button class="expand-btn text-gray-400 hover:text-red-400 transition-all duration-300 hover:scale-125">‚õ∂</button>
                        </div>
                    </div>

                    <!-- Claude Panel -->
                    <div class="ai-panel glass rounded-2xl p-6 neon-glow" data-model="claude">
                        <div class="flex justify-between items-center mb-6">
                            <div class="flex items-center space-x-4">
                                <!-- Added Claude brand logo -->
                                <div class="w-10 h-10 bg-gradient-to-br from-orange-400 to-orange-600 rounded-xl flex items-center justify-center shadow-lg">
                                    <svg class="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10zm-1-17h2v10h-2V5zm0 12h2v2h-2v-2z"/>
                                    </svg>
                                </div>
                                <h3 class="font-bold text-lg">Claude</h3>
                            </div>
                            <div class="toggle-switch active" data-model="claude">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                        <div class="response-area h-48 overflow-y-auto mb-6 p-4 rounded-xl">
                            <div class="text-sm text-gray-200">Hello! I'm Claude, ready to help with analysis and creative tasks.</div>
                        </div>
                        <div class="flex justify-between items-center">
                            <div class="flex space-x-3">
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëç</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëé</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üì§</button>
                            </div>
                            <button class="expand-btn text-gray-400 hover:text-red-400 transition-all duration-300 hover:scale-125">‚õ∂</button>
                        </div>
                    </div>

                    <!-- Gemini Panel -->
                    <div class="ai-panel glass rounded-2xl p-6 neon-glow" data-model="gemini">
                        <div class="flex justify-between items-center mb-6">
                            <div class="flex items-center space-x-4">
                                <!-- Added Gemini brand logo -->
                                <div class="w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                                    <svg class="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                    </svg>
                                </div>
                                <h3 class="font-bold text-lg">Gemini</h3>
                            </div>
                            <div class="toggle-switch active" data-model="gemini">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                        <div class="response-area h-48 overflow-y-auto mb-6 p-4 rounded-xl">
                            <div class="text-sm text-gray-200">Gemini here! Ready for multimodal AI assistance.</div>
                        </div>
                        <div class="flex justify-between items-center">
                            <div class="flex space-x-3">
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëç</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëé</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üì§</button>
                            </div>
                            <button class="expand-btn text-gray-400 hover:text-red-400 transition-all duration-300 hover:scale-125">‚õ∂</button>
                        </div>
                    </div>

                    <!-- Perplexity Panel -->
                    <div class="ai-panel glass rounded-2xl p-6 neon-glow" data-model="perplexity">
                        <div class="flex justify-between items-center mb-6">
                            <div class="flex items-center space-x-4">
                                <!-- Added Perplexity brand logo -->
                                <div class="w-10 h-10 bg-gradient-to-br from-cyan-400 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                                    <svg class="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                </div>
                                <h3 class="font-bold text-lg">Perplexity</h3>
                            </div>
                            <div class="toggle-switch" data-model="perplexity">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                        <div class="response-area h-48 overflow-y-auto mb-6 p-4 rounded-xl opacity-50">
                            <div class="text-sm text-gray-500">Enable to start research and fact-checking...</div>
                        </div>
                        <div class="flex justify-between items-center opacity-50">
                            <div class="flex space-x-3">
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëç</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëé</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üì§</button>
                            </div>
                            <button class="expand-btn text-gray-400 hover:text-red-400 transition-all duration-300 hover:scale-125">‚õ∂</button>
                        </div>
                    </div>

                    <!-- DeepSeek Panel -->
                    <div class="ai-panel glass rounded-2xl p-6 neon-glow" data-model="deepseek">
                        <div class="flex justify-between items-center mb-6">
                            <div class="flex items-center space-x-4">
                                <!-- Added DeepSeek brand logo -->
                                <div class="w-10 h-10 bg-gradient-to-br from-red-500 to-red-700 rounded-xl flex items-center justify-center shadow-lg">
                                    <svg class="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2l2.09 6.26L20 10l-5.91 4.26L16.18 22 12 18.27 7.82 22l2.09-7.74L4 10l5.91-1.74L12 2z"/>
                                    </svg>
                                </div>
                                <h3 class="font-bold text-lg">DeepSeek</h3>
                            </div>
                            <div class="toggle-switch" data-model="deepseek">
                                <div class="toggle-slider"></div>
                            </div>
                        </div>
                        <div class="response-area h-48 overflow-y-auto mb-6 p-4 rounded-xl opacity-50">
                            <div class="text-sm text-gray-500">Enable to start deep reasoning tasks...</div>
                        </div>
                        <div class="flex justify-between items-center opacity-50">
                            <div class="flex space-x-3">
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëç</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üëé</button>
                                <button class="text-gray-400 hover:text-white transition-all duration-300 hover:scale-125">üì§</button>
                            </div>
                            <button class="expand-btn text-gray-400 hover:text-red-400 transition-all duration-300 hover:scale-125">‚õ∂</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Input Bar -->
            <div class="p-6">
                <!-- Enhanced input form with premium styling -->
                <form id="chatForm" class="glass rounded-2xl p-6 neon-glow pulse">
                    <div class="flex items-center space-x-6">
                        <input 
                            type="text" 
                            id="promptInput" 
                            name="prompt"
                            placeholder="Ask me anything..." 
                            class="flex-1 bg-transparent border-none outline-none text-white placeholder-gray-400 text-lg"
                            autocomplete="off"
                            required
                        >
                        <button type="button" class="text-gray-400 hover:text-red-400 transition-all duration-300 hover:scale-125">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
                            </svg>
                        </button>
                        <button type="button" class="text-gray-400 hover:text-red-400 transition-all duration-300 hover:scale-125">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
                            </svg>
                        </button>
                        <button 
                            type="submit" 
                            id="submitBtn"
                            class="premium-btn text-white p-4 rounded-xl hover:transform hover:scale-110 transition-all duration-300"
                        >
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                            </svg>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Initialize particles
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            for (let i = 0; i < 75; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 8 + 's';
                particle.style.animationDuration = (Math.random() * 4 + 4) + 's';
                particlesContainer.appendChild(particle);
            }
        }

        // Mobile menu toggle
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        const sidebar = document.getElementById('sidebar');

        mobileMenuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('open');
        });

        // Toggle switch functionality
        document.querySelectorAll('.toggle-switch').forEach(toggle => {
            toggle.addEventListener('click', () => {
                const model = toggle.dataset.model;
                const panel = document.querySelector(`[data-model="${model}"]`);
                const isCurrentlyActive = toggle.classList.contains('active');
                
                // Check how many AIs are currently active
                const activeToggles = document.querySelectorAll('.toggle-switch.active');
                
                // Prevent disabling if this is the last active AI
                if (isCurrentlyActive && activeToggles.length === 1) {
                    // Show warning message
                    const warningDiv = document.createElement('div');
                    warningDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-xl z-50 font-semibold';
                    warningDiv.textContent = 'At least one AI must remain active!';
                    document.body.appendChild(warningDiv);
                    
                    // Remove warning after 3 seconds
                    setTimeout(() => {
                        warningDiv.remove();
                    }, 3000);
                    return;
                }
                
                toggle.classList.toggle('active');
                
                if (toggle.classList.contains('active')) {
                    // Show panel with animation
                    panel.style.display = 'block';
                    setTimeout(() => {
                        panel.style.opacity = '1';
                        panel.style.transform = 'scale(1)';
                    }, 10);
                    
                    const responseArea = panel.querySelector('.response-area');
                    const actions = panel.querySelector('.flex.justify-between');
                    responseArea.classList.remove('opacity-50');
                    actions.classList.remove('opacity-50');
                    responseArea.innerHTML = `<div class="text-sm text-gray-200">${model.charAt(0).toUpperCase() + model.slice(1)} is now active and ready!</div>`;
                } else {
                    // Hide panel with animation
                    panel.style.opacity = '0';
                    panel.style.transform = 'scale(0.8)';
                    setTimeout(() => {
                        panel.style.display = 'none';
                    }, 300);
                }
                
                // Adjust grid layout based on visible panels
                updateGridLayout();
            });
        });

        function updateGridLayout() {
            const visiblePanels = document.querySelectorAll('.ai-panel[style*="display: block"], .ai-panel:not([style*="display: none"])');
            const grid = document.getElementById('aiPanelsGrid');
            
            // Adjust grid columns based on number of visible panels
            if (visiblePanels.length === 1) {
                grid.className = 'grid grid-cols-1 gap-6 mb-6';
            } else if (visiblePanels.length === 2) {
                grid.className = 'grid grid-cols-1 md:grid-cols-2 gap-6 mb-6';
            } else {
                grid.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6';
            }
        }

        function initializePanelVisibility() {
            document.querySelectorAll('.ai-panel').forEach(panel => {
                const toggle = panel.querySelector('.toggle-switch');
                if (!toggle.classList.contains('active')) {
                    panel.style.display = 'none';
                } else {
                    panel.style.display = 'block';
                    panel.style.opacity = '1';
                    panel.style.transform = 'scale(1)';
                }
            });
            updateGridLayout();
        }

        // Get active AI panels in order
        function getActivePanels() {
            const allPanels = ['chatgpt', 'claude', 'gemini', 'perplexity', 'deepseek'];
            return allPanels.filter(model => {
                const toggle = document.querySelector(`[data-model="${model}"] .toggle-switch`);
                return toggle && toggle.classList.contains('active');
            });
        }

        // Show loading state for active panels
        function showLoadingState() {
            const activePanels = getActivePanels();
            
            activePanels.forEach(model => {
                const panel = document.querySelector(`[data-model="${model}"]`);
                const responseArea = panel.querySelector('.response-area');
                
                responseArea.innerHTML = `
                    <div class="flex items-center justify-center h-full">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-red-400"></div>
                        <span class="ml-3 text-sm text-gray-300">Thinking...</span>
                    </div>
                `;
            });
        }

        // Display responses in active panels
        function displayResponses(answers) {
            const activePanels = getActivePanels();
            
            // Distribute answers to active panels
            activePanels.forEach((model, index) => {
                const panel = document.querySelector(`[data-model="${model}"]`);
                const responseArea = panel.querySelector('.response-area');
                
                if (index < answers.length && answers[index]) {
                    responseArea.innerHTML = `<div class="text-sm text-gray-200">${answers[index]}</div>`;
                } else {
                    responseArea.innerHTML = `<div class="text-sm text-gray-400">No response available</div>`;
                }
            });
        }

        // Handle form submission
        document.getElementById('chatForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const promptInput = document.getElementById('promptInput');
            const submitBtn = document.getElementById('submitBtn');
            const prompt = promptInput.value.trim();
            
            if (!prompt) {
                alert('Please enter a prompt');
                return;
            }
            
            // Check if any AI is active
            const activePanels = getActivePanels();
            if (activePanels.length === 0) {
                alert('Please enable at least one AI panel');
                return;
            }
            
            try {
                // Disable submit button and show loading
                submitBtn.disabled = true;
                submitBtn.innerHTML = `
                    <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                `;
                
                // Show loading state for all active panels
                showLoadingState();
                
                // Make AJAX request to backend
                const response = await fetch('/user/prompt', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ prompt })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                // Display the responses
                if (data.answers && data.answers.length > 0) {
                    displayResponses(data.answers);
                } else {
                    throw new Error('No answers received from API');
                }
                
                // Clear input
                promptInput.value = '';
                
            } catch (error) {
                console.error('Error:', error);
                
                // Show error in all active panels
                const activePanels = getActivePanels();
                activePanels.forEach(model => {
                    const panel = document.querySelector(`[data-model="${model}"]`);
                    const responseArea = panel.querySelector('.response-area');
                    responseArea.innerHTML = `<div class="text-sm text-red-400">Error: ${error.message}</div>`;
                });
                
                alert('Error getting AI response. Please try again.');
            } finally {
                // Re-enable submit button
                submitBtn.disabled = false;
                submitBtn.innerHTML = `
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                    </svg>
                `;
            }
        });

        // Handle Enter key in input
        document.getElementById('promptInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                document.getElementById('chatForm').dispatchEvent(new Event('submit'));
            }
        });

        // New chat button functionality
        document.getElementById('newChatBtn').addEventListener('click', () => {
            // Clear all response areas
            document.querySelectorAll('.response-area').forEach(area => {
                const panel = area.closest('.ai-panel');
                const model = panel.dataset.model;
                const toggle = panel.querySelector('.toggle-switch');
                
                if (toggle.classList.contains('active')) {
                    area.innerHTML = `<div class="text-sm text-gray-200">${model.charAt(0).toUpperCase() + model.slice(1)} is ready to assist!</div>`;
                }
            });
            
            // Clear input
            document.getElementById('promptInput').value = '';
            
            // Focus on input
            document.getElementById('promptInput').focus();
        });

        // Initialize everything when page loads
        document.addEventListener('DOMContentLoaded', () => {
            createParticles();
            initializePanelVisibility();
            
            // Focus on input for better UX
            document.getElementById('promptInput').focus();
        });

        // Handle expand button clicks (optional feature)
        document.querySelectorAll('.expand-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const panel = e.target.closest('.ai-panel');
                const responseArea = panel.querySelector('.response-area');
                
                // Toggle height for expanded view
                if (responseArea.classList.contains('h-48')) {
                    responseArea.classList.remove('h-48');
                    responseArea.classList.add('h-96');
                    btn.textContent = '‚õ∂';
                } else {
                    responseArea.classList.remove('h-96');
                    responseArea.classList.add('h-48');
                    btn.textContent = '‚õ∂';
                }
            });
        });

    </script>
</body>

</html>